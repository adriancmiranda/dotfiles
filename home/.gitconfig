[user]
	name = Adrian C. Miranda
	email = adriancmiranda@gmail.com

[github]
	user = adriancmiranda
	token = 9f6e9f011b9a3f11e91cHa0zcadea11bfe935df169206

[core]
	editor = vim
	pager = less
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	ignorecase = false

[color]
	ui = true
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	pager = true

[http]
	postBuffer = 157286400

[web]
	browser = chrome

[merge]
	tool = vimdiff

[push]
	default = current

[diff]
	renames = true

[alias]
	id = rev-parse HEAD
	
	prd = !git change master

	hml = !git change hml

	dev = !git change dev

	master = !git prd

	staging = !git hml

	develop = !git dev

	cleanupds = "!_() { find . -type f -name '*.DS_Store' -ls -delete; }; _"

	ours = "!_() { git checkout --ours $@ && git add $@; }; _"

	theirs = "!_() { git checkout --theirs $@ && git add $@; }; _";

	dev-deploy = "!_() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git pull --verbose && git pull origin $BRANCH --verbose && git push origin $BRANCH && git checkout develop && git pull origin develop --verbose && git merge $BRANCH && git push origin develop && git checkout $BRANCH && say -v \"cellos\" \"oh This is a silly song silly song silly song this is the silliest song ive ever ever heard So why keep you listening listening listening while you are supposed to work to work to work to work its because i hate my job hate my job hate my job its because i hate my job more than anything else No its because youve no life youve no life youve no life and you better go get one after forwarding this crap"; }; _"

	hml-deploy = "!_() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git pull --verbose && git pull origin $BRANCH --verbose && git push origin $BRANCH && git checkout develop && git pull origin develop --verbose && git merge $BRANCH && git push origin develop && git checkout hml && git pull origin hml --verbose && git merge develop && git push origin hml && git checkout $BRANCH && say -v \"cellos\" \"oh This is a silly song silly song silly song this is the silliest song ive ever ever heard So why keep you listening listening listening while you are supposed to work to work to work to work its because i hate my job hate my job hate my job its because i hate my job more than anything else No its because youve no life youve no life youve no life and you better go get one after forwarding this crap"; }; _"

	alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort

	lastcommit = log -1 HEAD

	lasttag = describe --tags --abbrev=0

	rmtag = "!_() { git tag -d $1 && git push origin :refs/tags/$1; }; _"

	unstage = reset HEAD -- #file

	untrack = rm --cache -- #file

	upstream = "!_() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git branch --set-upstream $(BRANCH) origin/$(BRANCH); }; _"

	history = log --graph --pretty=format:'%Cred%h%Creset %C(yellow)%an%d%Creset %s %Cgreen(%cr)%Creset' --date=relative

	branchs = !git fetch --all && git fetch -p && git branch -a

	track = "!_() { git checkout --track -B $1 origin/$1; }; _"

	change = "!_() { git checkout $1 && git pull origin $1 --verbose; }; _"

	mkbranch = "!_() { git checkout -b $1 && git push origin $1 && git change master && git track $1 && git checkout $1; }; _"

	rmbranch = "!_() { git branch -D $1; git push origin :$1; git branchs; }; _"

	mvbranch = "!_() { OLD_NAME=$1; NEW_NAME=$2; git branch -m $OLD_NAME $NEW_NAME; git push origin :$OLD_NAME; git push origin $NEW_NAME; git branchs; }; _"

	info = !git uri && git who && git branchs && git lasttag

	up = !git pull origin $(git rev-parse --abbrev-ref HEAD) && git pull --verbose

	psh = !git up && git push origin $(git rev-parse --abbrev-ref HEAD) && say -v "hysterical" "git git giiiit"

	record = ! sh -c '(git add -p -- $@ && git commit) || git reset' --

	fuse = !git up && git merge

	goto = !git change

	stat = !git status -s

	st = !git status -s

	undo = "!_() { if [[ -z $1 ]]; then git reset --hard; else git checkout HEAD -- $1; fi }; _"

	who = shortlog -sne

	uri = remote -v

	url = !git uri

	gk = 'gitk --all&'

	k = !gitk

	gx = 'gitx --all'

	prune-all = !git remote | xargs -n 1 git remote prune

	empty-tree-sha1 = hash-object -t tree /dev/null

	oneline ="!_() { $(test $# -eq 0 && echo xargs -L1) git log --no-walk --decorate --oneline \"$@\"; }; _"

	tips = "!_() { t=$(git rev-list --no-merges --max-count=1 \"$@\"); if test -n \"$t\"; then echo $t; _ \"$@\" ^$t; fi; }; _"

	copyrsa = "pbcopy < ~/.ssh/id_rsa.pub"
	
	change-passphrase = "!_() { OLD_PASSPHRASE=$1; NEW_PASSPHRASE=$2; ssh-keygen -p -P $OLD_PASSPHRASE -N $NEW_PASSPHRASE -f $HOME/.ssh/id_rsa; }; _;"
	
	print-authors = "!_() { git shortlog -se | perl -spe 's/^\\s+\\d+\\s+//' | sed -e '/^CommitSyncScript.*$/d' > AUTHORS; }; _;"

