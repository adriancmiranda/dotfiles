#!/bin/bash
#
# URL: https://github.com/adriancmiranda/dotfiles
# Title: Dotfiles
# Usage: ./install
# Copyright: 2016 Adrian C. Miranda
# License: MIT
# Version: 0.0.1
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SYM: For reading through a symlink, which is usually not what you want
# (you usually don't want to confuse the user this way)
SYM=$(basename "$(test -L "$0" && readlink "$0" || echo "$0")");
DIR=$(dirname "$0");
PWD=$(pwd);
ABS=$(cd "$DIR"; pwd);

# Navigate to current directory
cd "$ABS";


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#
#
# HUMANIZE COLORS
#
#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# colors
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# @usage: printf "${Bla}black ${Red}red ${NC} ...\n";
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# regular         bold               underline          high intensity     boldhigh intens..   background         high intensity bgs
Yel='\e[0;33m';   BYel='\e[1;33m';   UYel='\e[4;33m';   IYel='\e[0;93m';   BIYel='\e[1;93m';   On_Yel='\e[43m';   On_IYel='\e[0;103m';
Pur='\e[0;35m';   BPur='\e[1;35m';   UPur='\e[4;35m';   IPur='\e[0;95m';   BIPur='\e[1;95m';   On_Pur='\e[45m';   On_IPur='\e[0;105m';
Bla='\e[0;30m';   BBla='\e[1;30m';   UBla='\e[4;30m';   IBla='\e[0;90m';   BIBla='\e[1;90m';   On_Bla='\e[40m';   On_IBla='\e[0;100m';
Gre='\e[0;32m';   BGre='\e[1;32m';   UGre='\e[4;32m';   IGre='\e[0;92m';   BIGre='\e[1;92m';   On_Gre='\e[42m';   On_IGre='\e[0;102m';
Whi='\e[0;37m';   BWhi='\e[1;37m';   UWhi='\e[4;37m';   IWhi='\e[0;97m';   BIWhi='\e[1;97m';   On_Whi='\e[47m';   On_IWhi='\e[0;107m';
Blu='\e[0;34m';   BBlu='\e[1;34m';   UBlu='\e[4;34m';   IBlu='\e[0;94m';   BIBlu='\e[1;94m';   On_Blu='\e[44m';   On_IBlu='\e[0;104m';
Cya='\e[0;36m';   BCya='\e[1;36m';   UCya='\e[4;36m';   ICya='\e[0;96m';   BICya='\e[1;96m';   On_Cya='\e[46m';   On_ICya='\e[0;106m';
Red='\e[0;31m';   BRed='\e[1;31m';   URed='\e[4;31m';   IRed='\e[0;91m';   BIRed='\e[1;91m';   On_Red='\e[41m';   On_IRed='\e[0;101m';

# alert messages
INFO=${Bla}${On_Whi};
SUCCESS=${BBla}${On_Gre};
FAULT=${Red}${On_Bla};
WARN=${Bla}${On_Yel};

# no color
NC='\e[0m';

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# line decoration
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LD="$(printf %86s | tr " " "/")${NC}";


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#
#
# UTILS
#
#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function log {
	local message=$@;
	printf "$message\n";
}

function success {
	local message=${1-};
	log $message;
}

function error {
	local kind=$1;
	local message=$2;
	log "${Red}$LD${NC}\n${FAULT}✖ $kind:${NC} $message\n${Red}$LD${NC}";
}

function warn {
	local message=${1-};
	log "${Yel}$LD${NC}\n$message\n${Yel}$LD${NC}";
}

# echo "eita: mvsec ae ae1";
# if [[ $(mvsec ae ae1) == "1" ]]; then
# if mv "$PWD/mongodb" "$HOME/bin"; then
# 	echo >&2 "successfully acquired lock: moved!";
# 	# echo "aeafasdfasdfasdfasfadsfadsfasfadsfasdfadfasfdsadfasdfa";
# else
# 	echo >&2 "não moveu!!!!";
# fi

# listAllFiles "$folder_empty";
# listAllFiles "$folder_empty2";
# listAllFiles "$folder_empty3";
# listAllFiles "$folder_full";

# printf "$LD\n";

# if is_empty "$folder_empty"; then echo "$folder_empty: Is empty"; else echo "$folder_empty: Not empty"; fi
# if is_empty "$folder_empty2"; then echo "$folder_empty2: Is empty"; else echo "$folder_empty2: Not empty"; fi
# if is_empty "$folder_empty3"; then echo "$folder_empty3: Is empty"; else echo "$folder_empty3: Not empty"; fi
# if is_empty "$folder_full"; then echo "$folder_full: Is empty"; else echo "$folder_full: Not empty"; fi

# printf "$LD\n";

# if [ -d "$folder_empty" ] && [ -z "$(ls -A -- "$folder_empty")" ]; then
# 	echo "$folder_empty: Is empty";
# else
# 	echo "$folder_empty: Not empty";
# fi

# if [ -d "$folder_empty2" ] && [ -z "$(ls -A -- "$folder_empty2")" ]; then
# 	echo "$folder_empty2: Is empty";
# else
# 	echo "$folder_empty2: Not empty";
# fi

# if [ -d "$folder_empty3" ] && [ -z "$(ls -A -- "$folder_empty3")" ]; then
# 	echo "$folder_empty3: Is empty";
# else
# 	echo "$folder_empty3: Not empty";
# fi

# if [ -d "$folder_full" ] && [ -z "$(ls -A -- "$folder_full")" ]; then
# 	echo "$folder_full: Is empty";
# else
# 	echo "$folder_full: Not empty";
# fi


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#
#
# APACHE
#
#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# /etc/apache2/httpd.conf
# /etc/apache2/users/$HOME.conf
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# sudo apachectl start
# sudo apachectl stop
# sudo apachectl restart
# sudo apachectl graceful
# /Library/WebServer/Documents/
# sudo chmod 644 $HOME.conf

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Secure tunnels to localhost
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# curl -O https://dl.ngrok.com/ngrok_2.0.19_darwin_amd64.zip && unzip ngrok_2.0.19_darwin_amd64.zip -p ~/bin;

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#
#
# DATABASE
#
#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MySQL
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function downloadMySQL {
	:
}

function installMySQL {
	:
}

function configureMySQL {
	:
}

function backupMySQL {
	:
}

function uninstallMySQL {
	:
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MongoDB
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function downloadMongoDB {
	local URL="$1";
	local host=$(dirname "$URL");
	local extension=$(basename ${URL##*.});
	local file=$(basename ${URL%.*});
	local name="mongodb";
	(
		set -e;
		curl -O $URL | log "[Downloading ${INFO} $file.$extension ${NC} from ${INFO} $host ${NC}...]:";
		tar -zxvf "$PWD/$file.$extension";
		mkdir -p "$PWD/$name";
		cp -R -n "$PWD/$file/" "$PWD/$name";
		success "${INFO} Done! ${NC}";
		installMongoDB $URL;
	)
	[ $? -eq 0 ] ||
	(
		local ERROR=$?;
		error "ERROR" "Download ${INFO} $file.$extension ${NC} has been failed.";
		exit $ERROR;
	)
	{
		local ERROR=$?;
		rm "$PWD/$file.$extension";
		rm -rf "$PWD/$file" "$PWD/$name";
		exit $ERROR;
	}
}

function installMongoDB {
	local URL="$1";
	local host=$(dirname "$URL");
	local extension=$(basename ${URL##*.});
	local file=$(basename ${URL%.*});
	local name="mongodb";
	local installDir="$HOME/bin";
	uninstallMongoDB $URL;
	(
		set -e;
		log "\n[Installing ${INFO} $file.$extension ${NC}]:";
		if mv "$PWD/$name" "$installDir"; then
			log >&2 "${INFO} $PWD/$name ${NC} has been successfully installed";
			configureMongoDB;
		else
			warn >&2 "${WARN} $name ${NC} has been installed in same address before.\nCheckout: ${INFO} $installDir/$name ${NC}";
		fi
	)
	[ $? -eq 0 ] ||
	(
		local ERROR=$?;
		error "ERROR" "The ${INFO} $file.$extension ${NC} installation failed.";
		exit $ERROR;
	)
}

function configureMongoDB {
	(
		set -e;
		log "\n[Configuring ${INFO} $file.$extension ${NC}]:";
		# mkdir -p /data/db
	)
	[ $? -eq 0 ] ||
	(
		local ERROR=$?;
		error "CONFIGURATION_ERROR" "The ${INFO} $file.$extension ${NC} configuration failed.";
		exit $ERROR;
	)
}

function backupMongoDB {
	(
		set -e;
		log "\n[Backuping ${INFO} $file.$extension ${NC}]:";
		# mkdir -p ~/Desktop/_dotfiles/MongoDB/installers ~/Desktop/_dotfiles/MongoDB/backup ~/Desktop/_dotfiles/MongoDB/raw;
		# cp -R -n ./mongodb ~/Desktop/_dotfiles/MongoDB/installers;
		# mv mongodb-osx-x86_64-3.2.1.tgz ~/Desktop/dotfiles;
		# rm mongodb-osx-x86_64-3.2.1.tgz;
	)
	[ $? -eq 0 ] ||
	(
		local ERROR=$?;
		error "BACKUP_ERROR" "Backup from ${INFO} $file.$extension ${NC} has been failed.";
		exit $ERROR;
	)
}

function uninstallMongoDB {
	(
		set -e;
		backupMongoDB;
		# log "\n[Uninstalling ${INFO} $file.$extension ${NC}]:";
		# rm -rf ~/bin/mongodb;
	)
	[ $? -eq 0 ] ||
	(
		local ERROR=$?;
		error "CLEANUP_ERROR" "${INFO} $file.$extension ${NC} cleanup has been failed.";
		exit $ERROR;
	)
}


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#
#
# SUBLIME
#
#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# function downloadSublimeText {
# 	/Applications/Sublime\ Text.app/Contents/Resources/Sublime\ Text.icns
# }

# function installSublimeText {
# 	/Applications/Sublime\ Text.app/Contents/Resources/Sublime\ Text.icns
# }

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Icons
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# function installSublimeTextIcons {
# 	/Applications/Sublime\ Text.app/Contents/Resources/Sublime\ Text.icns
# }

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Themes
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function installSublimeTextThemes {
	:
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Snippets
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function installSublimeTextSnippets {
	:
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Build Systems
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function installSublimeTextBuildSystems {
	:
}


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Banner
log "                      ";
log "   /     '      /  /  ";
log "  /__      ___ (  /   ";
log "  \\--\`-'-|\`---\\ | ";
log "   |' _/   \` __/ /   ";
log "   \'._  W    ,--\'   ";
log "      |_:_._/     a.m ";
log "                  box ";
log "${Red}$LD${NC}";
# downloadMySQL
downloadMongoDB "https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.2.1.tgz";
# installMongoDB "https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.2.1.tgz";

# downloadSublimeText;
# installSublimeTextIcons;
# installSublimeTextThemes;
# installSublimeTextSnippets;
# installSublimeTextBuildSystems;

# https://zcrashz.wordpress.com/2013/01/22/bash-shell-script-function-examples/
# source ~/.bash_profile;
# php -v;
# httpd -v;
# /usr/local/mysql/bin/mysql -v;
# mysql -v
# open ~/Desktop/_dotfiles;
# open ~/bin;
# open $PWD;